para iniciar um projeto usamos:
django-admin startproject nome_do_project .

para iniciar o servidor:
python manage.py runserver

a pasta criada com o 1° comando, é o coração do projeto.
Já para criar um novo APP usamos o comando:
python manage.py startapp nome_do_app
e para esse APP funcionar, é necessário declarar ele dentro do settings.py na pasta do project


*Camadas do django;
*Apps, mostra o nome do app e suas configurações.
*Tests, server para realizer testes no projeto.
*models, são os modelos/tabelas do banco de dados.
*views, é a lógica da aplicação.
*admin, relacionado com admin do django, server como administração do app.

Django por si, já tem algumas tabelas de gestão de usuário pré definidas, ajudando os usuários, no terminal digite:

python manage.py makemigrations

Assim montando uma migration onde terá comandos para o banco de dados.
Para criar um migrate, usamos:

python manage.py migrate

criará um script de banco de dados e criará dentro do sqlite.
SEMPRE que houver mudanças no nosso arquivo Models, é necessário realizar a seguinte sequência:
*makemigrations, para detectar as mudanças dos models.
*migrate, para informar ao banco de dados as mudanças.

Para criar um super_usuario, utilizamos:

python manage.py createsuperuser

Assim preenchendo oque é solicitado, após inicializar o servidor e ir para /admin, usamos o mesmo user para logar.

*camada de URL, são as rotas que o usuário terá no site.

TEMPLATES

A pasta template, não necessita ser informada no diretório, pois o django já compreende que quando criamos a pasta com o nome 'templates'
vamos adicionar nela os mesmos.

Dentro de Settings, na parte onde temos TEMPLATES, devemos adicionar o diretório do nosso template base criado dentro da pasta APP,
sendo a base de todo nosso sistema

Criação de novo endereço:
*1° Criamos uma nova URL;
*2° Criamos uma nova View;
*3° Caso seja necessario, criar um Forms;
*4° Criar um HTML para a pagina;
5° Conectar tudo.


Para criar campo de Validação SEMPRE devemos iniciar a função como 
def clean_NomeDoCampo(self):

*Ideia de treino/aprimoramento, criar uma tela de perfil de usuario


CBV's

SIGNALS
recurso que permite executar eventos durante CRUD;
podemos fazer notificação de pre-save ou post save de algo no banco, como descobrir quantos carros temos em estoque
pre-delete ou post delete, qualquer elemento do crud;

1°criar arquivo signals.py;
2° em app.py, criar uma função ready, importando os signals;
3° em signals devemos criar nossas regras:
from django.db.models.signals import pre_save, pre_delete, post_Save, post_delete
from django.dispatch import receiver
from cars.models import Car

@receiver(pre_Save, sender=Car) #decorator para o django entender que estamos recebendo um informação
 def qualquer_nome(sender, instance, **kwargs)
    #sender = tabela que envia o evento
    #instance = informações que estão sendo enviados
   

pip freeze > requirements.txt
pip install -r /requirements.txt/


BANCO DE DADOS POSTGRESQL
PARA ACESSAR O BANCO, USAMOS "psql -U usuario"

Para django nao importa o banco de dados que usamos, pois ele utiliza as configurações do ORM do django para fazer todo os códigos sqlite
Pórem caso queira utilizar um banco NoSQL ai terá que ser feito algumas mudanças no código;
Para adicionar um banco de dados, devemos alterar no coração do projeto settings.py, em databases adicionar o banco que queremos, junto com 
suas informações adicionais.
Os drives do django e do banco POSTGRESQL são muito similiares, tendo um ótimo desempenho e compatibilidade.
Para instalar ele no pc, é o famoso next next, aceito aceito.
Após no cmd digitar psql --version para ver se não teremos erros. se der erro é necessario adiciona-lo as variaveis de ambiente do sistema.
Dentro das variaveis de sistema, procurar por Path >> novo e adicionar:  c:/programfiles/POSTGRESQL/15/bin (local onde for instalado)
é necessario uma biblioteca para fazer o interligamento entre django e postgre psycopg2
No arquivo settings deverá ter os seguintes itens;

        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'NomeDaTabelaCriada',
        'USER': 'postgres', #DEFAULT
        'PASSWORD': 'SenhaAdicionada',
        'HOST': 'localhost', 
        'PORT': '5432', #Porta Padrão POSTGRESQL

        após isso deverá ser feito um migrate




DJANGO SHELL
o django shell assim como qualquer outro shell, server como um interpretador de códigos interativo, podendo ser utilizado
para fazer qualquer coisa do django, porem de uma forma mais rapida.
podemos fazer consulta nos bancos de dados de uma forma muito agil. *Principal função
para abrir o terminal do django usamos
Python manage.py shell